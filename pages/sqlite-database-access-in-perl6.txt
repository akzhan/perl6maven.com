=title SQLite - Database access in Perl 6
=timestamp 2017-06-05T22:22:02
=author szabgab
=keywords DBIish, SQLite
=status show
=archive 1
=comments 1

=abstract start

In tons of programs, especially web applications, we need to be able to access relational databases. One of the fastest RDBMS
is <a href="http://sqlite.org/">SQLite</a>, an embedded SQL database. In this example we'll see how to use SQLite in Perl 6.

When I was at <a href="http://www.yapcna.org/yn2016/">YAPC::NA 2016 in Orlando, Florida</a>, I also took a day off visiting the
<a href="https://www.kennedyspacecenter.com/">Kennedy Space Center</a> with my family. It is a very impressive presentation,
especially with the space-shuttle hanging there. They also had a room remembering the Astronauts we lost during the Shuttle flights.
To honour them, I am going to use the names of 7 astronauts who perished in the
<a href="https://en.wikipedia.org/wiki/Space_Shuttle_Columbia_disaster">Space Shuttle Columbia disaster</a> in this example.

=abstract end

<include file="examples/columbia.pl" />

If we run <hl>perl6 columbia.pl</hl> we get the following output:

<code>
7
$[1, "Rick D. Husband", "USA", "July 12, 1957"]
$[2, "William C. McCool", "USA", "September 23, 1961"]
$[3, "Michael P. Anderson", "USA", "December 25, 1959"]
$[4, "Kalpana Chawla", "India", "July 1, 1961"]
$[5, "David M. Brown", "USA", "April 16, 1956"]
$[6, "Laurel Clark", "USA", "March 10, 1961"]
$[7, "Ilan Ramon", "Israel", "June 20, 1954"]
</code>

DBIish is a generic, database independent interface to relational databases. Currently, AFAIK, it supports SQLite, MySQL, and PostgreSQL.

The <hl>connect</hl> method of DBIish establishes the connection to the database. As SQLite is a serverless database we only need to give it the path of the database file as the value of the <hl>database</hl> parameter. In our case <hl>:database($dbfile)</hl>
means the same as <hl>databse => $dbfile</hl> which is passing a key-value pair to the <hl>connect</hl> method.
The first parameter told <hl>connect</hl> that we are talking to an SQLite database.

We assign the datbase connection object to a variable called <hl>$dbh</hl>. (It is an arbitrary variable name, but it is recomended as dbh stands for database handle.)

Using the Database handle we can call the <hl>do</hl> method an execute any SQL statement the specific engine is ready to accept.

The first such statement will delete the 'astronaut' table if it existed earlier. e.g from a previous run of the same code.

In the second <hl>do</hl> statement we use a here-docoument to inlcude a multi-line sql statement. The expression <hl>q:to/STATEMENT/</hl> tells
Perl to look for a line that matches the <hl>STATEMENT</hl> regular expression and that's the end of the string.
This second <hl>do</hl> call will create the table. (In SQLite you don't need special permissions for either dropping a table or creating one.)

<h2>INSERT</h2>

Then we instert the data. First we call the <hl>prepare</hl> method with an SQL statement that uses <hl>?</hl> placeholders. These placeholder have two functions:
They allow us to reuse a prepared statement with several sets of data, thereby improving the speed of our code. They also help us avoid
<a href="http://bobby-tables.com/">SQL injection attacks</a>.

The returned object is assigned to a variable that is usually called sth-something as it is a "statement handle". As this example has two different statemen
handles I used two such variables.

Then we have the names of the astronauts in an array of lists and a loop that iterates over the elements of the array. The <hl>|</hl> in front of <hl>$p</hl>
converts the List item into the individual elements of the list. (We could have written <hl>@$p</hl> for the same result.)

<h2>SELECT</h2>

Once we have the data in the database we can try to get it back.
For this we prepare a <hl>SELECT</hl> statement.
Then <hl>execute</hl> it.

Then fetch all the rows.

Finally we close the database connection by calling <hl>dispose</hl>.


