=title Encrypting Passwords in Perl 6 using crypt
=timestamp 2017-03-29T13:02:02
=author szabgab
=keywords Crypt::Libcrypt, Terminal::Readsecret, pick, join
=status show
=archive 1
=comments 1

=abstract start

There are several <a href="http://modules.perl6.org/">Perl 6</a> modules to provide one-way encryption of passwords. 

I think Crypt::Bcrypt or Crypt::Argon2 would be the recommended ones to use, but currently they are both broken due to a dependency being broken. In the meantime, let's explore how the encryption could work using Crypt::Libcrypt.

=abstract end

<hl>Crypt::Libcrypt</hl> exports a single funcion called <hl>crypt</hl> that takes 2 parameters.
A password in clear-text and a "salt". A "<a href="https://en.wikipedia.org/wiki/Salt_(cryptography)">salt</a>" is just a string that is used to protect against
<a href="https://en.wikipedia.org/wiki/Dictionary_attack">dictionary attacks</a> using
 <a href="https://en.wikipedia.org/wiki/Rainbow_table">Rainbow tables</a>.

In the case of the <hl>crypt</hl> function it must be a random 2-character string.

<h2>Encrypt password</h2>

In the first example we have a password in a variable and a fixed salt:

<include file="examples/libcrypt_encrypt_password.pl" />

The output of this script is:

<code>
abNANd1rDfiNc
</code>

<h2>Verify password</h2>

In order to verify the password we need to have access to the
encrypted password and we can either use that string as the salt,
(The <hl>encrypt</hl> function will actually use the first 2 chaacters only.)
or we can use the <hl>substr</hl> method to extract the salt from the encrypted
password and use that on the orignal password.

<include file="examples/libcrypt_verify_password.pl" />

In either case the result is expected to be identical to the already
encrypted password.


<h2>Register and Authenticate</h2>

In a real application the algorithm might look like this:
When you register on a web site (or add a new user) you need to
provide something to identify you (e.g. a username) and something
to later verify that it is the same person coming back again.
For that we need a password.

(We might also ask for an e-mail or some other information, but for
our purposes a username and a password will be enough.)

We then check if that identifyer (in this case the username) is
free or if has already been used in our system.
If it has not been used yet then we generate a random seed, encrypt
the password and store the username and the encrupted password.


When at a later point you visit our site again we'll ask for your username
and password again. At this time, we retreive the encrypted password
associated to the given username from our database.
If there was no such username we report that we could not identify you.

If we got the encrypted password then we use it as the salt to encrypt
the password given to us just now. If the encryption results
in the same string as the encrypted string we fetched from the database
then we could verify that it is indeed the same username/password we got
earlier.

<h2>Generate random salt</h2>

First let's see how to generate random salt:

<include file="examples/random_salt.pl" />

For this we created a list of potential characters and then
use the <hl>pick</hl> method to pick two of the characters.
Finally used <hl>join</hl> to turn that into a string.

<h2>Accepting passwords on the command line</h2>

Instead of building a web application, for this example we'll
use the command line. For that we need to be able to accept
passwords on the command line.
We have already seen this in the <a href="/rakudo-perl6-with-docker">getting started with Perl 6 on Docker</a> article, but let's see the solution here again using Terminal::Readsecret:

<include file="examples/read_password.pl" />

<h2>Register and Authenticate</h2>

<include file="examples/users.pl" />

Our "database" is a plain csv file with the username and encrypted password fields separated by a comma.

<hl>get_salt</hl> will return a random salt.

<hl>read_users</hl> reads the csv file, splits each record into username and password and stores them in a hash.

<hl>save_users</hl> will save the hash of username - (encrypted) password pairs in the "database".

The <hl>main</hl> function has two parts. One handling new users "registering" and the other handling existing users "authenticating". The algorithm is described above.

<h2>Conclusion</h2>

While using <hl>crypt</hl> is not recommened for real password storage due to its weak encryption, it can be used to demonstrate how the algorithm could be used.
