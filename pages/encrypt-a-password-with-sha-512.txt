=title Encrypting Passwords in Perl 6 using crypt and SHA-512
=timestamp 2017-04-07T10:02:02
=author szabgab
=keywords Crypt::Libcrypt, Terminal::Readsecret, pick, join, SHA-512
=status show
=archive 1
=comments 1

=abstract start

In an earlier article I wrote about <a href="/encrypt-a-password">encrypting Passwords in Perl 6 using crypt</a>.
Several people pointed out and then I looked it up in the documentation of <hl>crypt</hl> as well, that
if one uses a recent (released after 2007) version of <hl>glibc2</hl> then instead of the default <a href="https://en.wikipedia.org/wiki/Data_Encryption_Standard">DES</a> algorithm,
the <hl>crypt</hl> function can be convinced to use the much stronger <a href="https://en.wikipedia.org/wiki/SHA-2">SHA-512</a> algorithm.

The full explanation of crypt can be found at the <a href="https://en.wikipedia.org/wiki/Crypt_(C)">Description of the Crypt library function</a>.

Bcrypt would still be a better solution, but till we can install that module this improvement is still better than the original version.

=abstract end

In a nutshell we can use a salt that looks likes this:

<code>
$6$SALT
</code>

Where the SALT can be any string up to 16 significant characters. (After the <hl>$6$</hl> prefix.)
(Both according to the <a href="http://man7.org/linux/man-pages/man3/crypt.3.html">man page on crypt</a>
and based on my experiment of supplying more characters, but getting the same results as with 16-long salt.)

A further improved version looks like this:

<code>
$6$rounds=ROUNDS$SALT
</code>

Where ROUNDS is a large number. How large?

As large as possible.  See the <a href="/benchmarking-crypt-in-perl6">benchmarks</a>.

<h2>Encrypt password</h2>

The enhanced version of the first example looks like this:

<include file="examples/libcrypt_encrypt_password_sha_512.pl" />

<code>
# perl6 libcrypt_encrypt_password_sha_512.pl
$6$abcdefghIJKLMOPQ$k7/p0miPUkmsxrxWKDuP5Apnb6MZ6.vfG6xulRYIRCnRtDXXgf5rA7M3yb5TeUdg1I8Hxux6BDbsf.ZABF/re.
</code>

The result repeats the salt in this format: (<hl>$6$SALT$</hl>) and then the encrypted string.
The encrypted part is alwyas 86 characters long.
So the full lenght of the result depends on the lengths of the salt, but the max length is 106 charcters.
Knowing this is important for when we will want to store it in a database.

<h2>Verify password</h2>

The first version of the verification process is the same, we can use the full encrypted string that contains
the salt as prefix instead of the salt.

If, however we would like to extract the salt, we need to take in account that the length of the salt can
vary. So we us the <hl>index</hl> method to locate the <hl>$</hl> sign that ends the salt and
use that number in the <hl>substr</hl> function.

<include file="examples/libcrypt_verify_password_sha_512.pl" />

<h2>Register and Authenticate</h2>

The algorithm is described in the <a href="/encrypt-a-password">original article</a>

<h2>Generate random salt</h2>

This is the same as earlier, except that we need to generate 16 characters and
we will have to prefix it by <hl>$6$</hl>.

<include file="examples/random_salt_sha_512.pl" />

<h2>Accepting passwords on the command line</h2>

This is the same as in the <a href="/encrypt-a-password">previus article</a>.

<h2>Register and Authenticate</h2>

In the final script nothing needs to change except the generation of the salt.  

<include file="examples/users_sha_512.pl" />

