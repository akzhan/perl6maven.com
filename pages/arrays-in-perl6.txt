=title Arrays in Perl 6
=timestamp 2017-06-09T10:02:02
=author szabgab
=keywords arrays, ==, ===, :=, @$, |$, |
=status show
=archive 1
=comments 1

=abstract start

Arrays are one of the fundamental container types in Perl 6. They are usually stored in a variable starting with a <hl>@</hl> sigil,
though they can also be stored in variables starting with a <hl>$</hl>.

=abstract end

<h2>Creating an array</h2>

We can declare an array using <hl>my</hl> and immediately assign a list of values to it. That assignment creates an array in <hl>@fruits</hl>.

The <hl>perl</hl> method returns a representation of the content.

<hl>^name</hl> returns the name of the data structure.

<hl>elems</hl> return the number of elements.

A trailing square-bracket allows us to access one of the elements by index. Indexing is 0-based,
but we can also start from the end if we write <hl>*</hl> and a negative number.

Perl 5 developers should note that the leading sigil is still <hl>@</hl> even when we access a single element.

Finally, we can iterate over the elements using a <hl>for</hl> loop.

<include file="examples/array_elements.pl" />

<h2>Copy of an array</h2>

An assignment from an array (a variable starting with <hl>@</hl>) to another array (a variable staring with <hl>@</hl>) is a copy.
(A shallow copy, if you ask, but we'll talk about that separately.)
If we change the content of one of the elements in one of the arrays, it does not change the elements in the other array.

<include file="examples/array_copy.pl" />

<h2>Equality and Identity</h2>

We can use the <hl>==</hl> operator to check if two arrays have the same content. (They have).
We can also use the <hl>===</hl> operator to check if the two arrays are identical. (They are not. They are copies.)

Once we change the content of one of them, they are not even equal any more.

<include file="examples/array_copy_equal.pl" />

<h2>Binding using :=</h2>

We can use the <hl>:=</hl> operator to bind two variables together.
That means the two variables now point to the exact same place in the memory. To the same container.
If we change the element of one of them, we change the element of the other one as well.

We can compare the two using <hl>==</hl> or with <hl>===</hl> and both of these will return True:
Not only is the content of the two the same they are actually identical.

<include file="examples/array_binding.pl" />

<h2>Array to generic</h2>

We can also assign an array in a <hl>@</hl> variable to a variable that starts with a <hl>$</hl> sign
that for now I'll call generic variable.

Using the <hl>^name</hl> attribute we can see that it remained an Array. Using the <hl>===</hl>
operator we can see that they are identical. So this assignment does not create a copy, but a
reference to the same area in the memory.

If we change one of them. We change the other.

Their representation using the <hl>perl</hl> method is slightly different due to the fact that
the generic variable (starting with <hl>$</hl>) sees the data as a single item,
while the array variable (staring with <hl>@</hl>)
sees the values as separate elements.

<include file="examples/array_to_generic.pl" />

<h2>Iterate over array in generic variable</h2>

If the generic variable is identical to the array variable then we should be able to do similar operations on them.

For example we can use the square-bracket indexing to get an element. In this case the leading sigil remains <hl>$</hl>.

We could also iterate over the elements using a <hl>for</hl> loop, but that does not work as expected. The <hl>$</hl> variable sees the array as a single item, therefore when we iterate over its elements, we only see one iteration that returns a single element. That contains the original array.

There are (at least) two ways to iterate over the values of the original array. One of them is
to use the <hl>@</hl> to prefix the <hl>$</hl> variable.

The other way is to use the <hl>|</hl> flattening operator.

Note, we could have also written <hl>|$s</hl> without a space, but we cannot have a space between the <hl>@</hl> and the <hl>$</hl>
in <hl>@$s</hl>.

<include file="examples/array_to_generic_for.pl" />

<h2>How to get the array (@) back from the generic ($) ?</h2>

The naive approach would be to just assign the $-variable back to a @-variable, but that does not take in account the fact that the generic $-variable see its content as a single element. So in the first attempt we get back an array in which there is only one element which is the array we had in the generic variable. This is basically a two-dimensional array with only one element in it.
We can access the individual elements inside the internal array using two square-brackets. We can also observe that that internal array is identical to the one in the generic variable.

So we need to turn the generic variable into an array in some way. Similar to what we saw in the previous example.

We can assign the <hl>@$s</hl> construct to a array variable in which case we get back the array from the generic variable. This creates a copy of the array. (They have the same content (<hl>==</hl>) but they are not the same container. They are not identical (<hl>===</hl>).

We can use the same construct but with <hl>:=</hl> binding instead of <hl>=</hl> assignment. That works too and in that case we get back an array which is identical (same container) to the content of the generic variable.

We could also use the <hl>|</hl> flattening operator. That will also create a copy of the content. Just like <hl>@$s</hl> did.

Trying to use <hl>:=</hl>, the binding operator here just confuses me. It still creates a copy but this time it is not even an Array any more. It is a <a href="https://docs.perl6.org/type/Slip">Slip</a> which is another list-like container type.

<include file="examples/array_to_generic_and_back.pl" />

